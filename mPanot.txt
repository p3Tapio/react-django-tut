
PT1, DJANGO BE: https://www.youtube.com/watch?v=Uyei2iDA4Hs&list=PLillGF-RfqbbRA-CIUxlxkUpbq0IFkX60 

1. Luo projekti kansio
2. cmd:ssä: 
    1: pip3 install pipenv 
    2: pipenv shell 
    3: pipenv install django djangorestframework django-rest-knox
    5. django-admin startproject leadmanager (leadmanager=projektin nimi)
    6. code . --> voila olet täällä
        - cntr, shift + p
            -- python select intrepter 
            -- valitse se jossa kansiosi ja pipenv 
    7. cmd: python manage.py startapp leads (leads = appin nimi, ilmeisesti leadmanager folderissa, lopputulksena leadmanager juuressa leads folder)
3. VSC:
    1. settings.py:  lisää installed apps kohtaan 'leads', 'rest_framework' (databeses kohdasta voisi tarvittaessa valita jonkun muun jotenkin :DD)
    2. leads-folder, models.py editit (luo luokka ym)
    
                from django.db import models

                class Lead(models.Model):
                    name = models.CharField(max_length=100)
                    email = models.EmailField(max_length=100, unique=True)  # oltava yksilöllinen 
                    message = models.CharField(max_length=500, blank=True)  # voi jättää tyhjäksi 
                    created_at = models.DateTimeField(auto_now_add=True)    # lisää pvmn automaattisesti 


4. CMD: 
    1. python manage.py makemigrations leads
    2. python manage.py migrate

--> DB SET !! NOW OF TO SET APIIII !!!

1. Do serializer (for json):
    1. luo tiedosto serializers.py kansioon leads:

            from rest_framework import serializers
            from leads.models import Lead 

            # Lead Serializer
            class LeadSerializer(serializers.ModelSerializer):
            class Meta:
                model = Lead 
                fields = '__all__'
    
    2. Samaan mestaan - api.py: 

            from leads.models import Lead
            from rest_framework import viewsets, permissions
            from .serializers import LeadSerializer

            # Lead Viewset (täys crudi ilman metodien specifiointia ! :D )

            class LeadViewSet(viewsets.ModelViewSet):
                queryset = Lead.objects.all() 
                permission_classes = [
                    permissions.AllowAny        # muutetaan myöhemmin - nyt kaikki auki kaikille 
                ]
                
                serializer_class = LeadSerializer



    3. leadmanager, leadmanager urls.py 
        
            from django.contrib import admin
            from django.urls import path, include

            urlpatterns = [
                path('', include('leads.urls')),
            ]

    4. Luo urls.py tiedosto leads kansioon 

            from rest_framework import routers
            from .api import LeadViewSet

            router = routers.DefaultRouter() 
            router.register('api/leads', LeadViewSet, 'leads')

            urlpatterns = router.urls 

DONE

5. Aja, cmd: python manage.py runserver 
6. testaa, postman: POST http://localhost:8000/api/leads/ Content-Type Application Json { "name": "", "email": "", "message":"" }
                    GET http://localhost:8000/api/leads/
                    PUT http://localhost:8000/api/leads/1/ Content-Type Application Json { "name": "", "email": "", "message":"" }
                    DELETE  http://localhost:8000/api/leads/1/

                HUOM: tarviit / -viivan loppuun jotta toimii ! 

TOIMII, TOIMII 
joten jos ei ens kerralla, tsekkaa tsekkaa, kyllä se siitä jne: 

Selostuksessa linkkejä 

-----------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------

PT2: REACT FE https://www.youtube.com/watch?v=GieYIzvdt2U&list=PLillGF-RfqbbRA-CIUxlxkUpbq0IFkX60&index=2

EI create-react-app komentoa, vaan ...
refrenssiksi: https://www.valentinog.com/blog/drf/#Django_REST_with_React_Django_and_React_together

1. cmd / pipenv shellissä: 
   1.  leadmanager juuressa: python manage.py startapp frontend (= appin nimi)
   2.  frontend folderiin folderit: src, src/components, src/static/frontend, src/templates/frontend, 
   3.  projekti-juuressa: npm init -y, npm i -D webpack webpack-cli
   4.  --"--  npm i -D @babel/core babel-loader @babel/preset-env @babel/preset-react babel-plugin-transform-class-properties
   5.  --"-- npm i react react-dom prop-types

        Lopputulos tulisi olla tän näköinen: (package.json)
        ... 
                },
                    "keywords": [],
                    "author": "",
                    "license": "ISC",
                    "devDependencies": {
                        "@babel/core": "^7.9.0",
                        "@babel/preset-env": "^7.9.5",
                        "@babel/preset-react": "^7.9.4",
                        "babel-loader": "^8.1.0",
                        "babel-plugin-transform-class-properties": "^6.24.1",
                        "webpack": "^4.42.1",
                        "webpack-cli": "^3.3.11"
                    },
                    "dependencies": {
                        "prop-types": "^15.7.2",
                        "react": "^16.13.1",
                        "react-dom": "^16.13.1"
                    }
    6. tiedosto projekti-juureen .babelrc:(((( EIII, KS ALLA, kohta 19))))

        {
           "presets": ["@babel/presets-env", "@babel/preset-react"],
            "plugins": ["transform-class-properties"]
        }

    7. tiedosto projekti-juureen webpack.config.js: 

        module.exports = {
            module: {
                rules: [
                    {
                        test: /\.js$/,
                        exclude: /node_modules/,
                        use: {
                            loader: "babel-loader"
                        }
                    }
                ]
            }
        }

    8. package.json:
        - vaihda test-sana skripteistä sanaan dev ja sinne rimpsu: 
            "dev": "webpack --mode development ./leadmanager/frontend/src/index.js --output ./leadmanager/frontend/static/frontend/main.js"
    9. package.json:
        - devin alle: 
                "build": "webpack --mode production ./leadmanager/frontend/src/index.js --output ./leadmanager/frontend/static/frontend/main.js"

    KUN HALUAT KEHITYKSESSÄ AJAA APPIA: npm run dev, KUN BUILDI: npm run build 

    10. Luo index.js src-kansioon, ei muuta nyt kuin: import App from './components/App'; 

    11. components folderiin App.js: importtaa react, react-dom ja tee luokka App, johon vaan joku returni, vaik <h1>APPP!!</h1>
        myös:  ReactDOM.render(<App/>, document.getElementById("app")) 

    12. templates/frontend: luo index.html tääne ja sinne divi apille ja muutama muu juttu: 
        <body>
            <div id="app"></div>
            {% load static %}
            <script src="{% static "frontend/main.js" %}"></script>
        </body>
    13. hae bootswatch.com teema ... huom avaa download linkki oikealla napilla (open new tab .min filestä) browseriin ja ota koodin osoite siten src:hen tohon yllä olevaan tiedostoon
        <link rel="stylesheet" href="https://bootswatch.com/4/sandstone/bootstrap.min.css">

    14. getbootstrapista skripti linkit sivun pohjalle aikaisemman skirptin jälkeen 

            <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
            <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
            <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
    
    15. settings.py leadmanager/leadmanagerissa lisää installed_apps kohtaan myös 'frontend' 

    16. frontend views.py : 

        def index(request):
            return render(request, 'frontend/index.html' )

    17. frontend-folderin juuressa: luo urls.py tiedosto: 

        from django.urls import path 
        from . import views
        urlpatterns = [
            path('', views.index)
        ]
    
    18. leadmanager urls.py tiedostoon EKAKSI: 
        urlpatterns = [
                path('', include('frontend.urls')),
                ... 
    
    19. pipenv/ cmd:ssa, projekti-juuressa:  npm run dev (sormet ristiin toimiiko!?)
        EEEIIII ... 
            Mutta poista .babelrc ja lisää tämä webpack.config.js -tiedostoon: 

                 use: {
                    loader: "babel-loader",
                    options: {
                        presets: [
                            "@babel/preset-env",
                            "@babel/preset-react"
                        ],
                        plugins: [
                            "@babel/plugin-syntax-dynamic-import"
                        ]
                    }
                }

                https://github.com/babel/babel-loader/issues/493#issuecomment-452380751

    20. Luo kansio src/components/layout, tee tiedosto "Header.js", johon nav-bar:
        https://getbootstrap.com/docs/4.4/components/navbar/ (jossa otsikkona "hidden brand" )

        Kätsä tapa valita "kaikki" ctrl + klikkaile d:tä

        Poista formi ja vaihda nimiä yms 

    21. App.js: import Header from './layout/Header';  
        return ( <Header/> )

        (testaa: juuressa npm run dev, ja leadmanager/python manage.py runserver)

        AARrrghh --- MUISTA: "disable cache" !!! 

    22. components folderiin kansio leads johon tiedostot: Dashboard.js, Form.js, Leads.js 

        Form.js: class component joka toiseksi pelkkä header tms 
        Leads.js: class componet (rce ja pari tabii) ja jotain sisältöä kuten edellä 

        Dashboard.js: Funtional component (rcf tab, tab), koska ei tee muuta kuin esittää aikaisemmat 
            - importoi from ja leads, sekä import React, {Fragment} from 'react' (kvg fragment -- kätevöittää jtn mut whyyy?)
            - ks tiedostosta loput 
        
    23. Importoi Dashboard.js ja fragments App.js-tiedostoon ja: 
                return (
                    <Fragment>
                        <Header />
                        <div className="container">
                            <Dashboard />
                        </div>
                    </Fragment>
                );

(Toimi edelleen)
------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------

PT3: Redux & HTTP https://www.youtube.com/watch?v=BmL8iaLMnQ0&list=PLillGF-RfqbbRA-CIUxlxkUpbq0IFkX60&index=3

Suositus katsoa eka redux-kursseja esim https://www.youtube.com/watch?v=93p3LxR9xfM&pbjreload=10
Mut heeyyy ... ei nyt kesken jätetä eli syssymmällä 

    1. Asenna redux dev tools chromeen (saa näkyviin siitä valikosta, josta voi ottaa käyttöön esim consolen. Näyttää reduxin muuttujien tilan yms vissii)

    2. npm i redux react-redux redux-thunk redux-devtools-extension (tein projektin juuressa)
       npm run dev 

    3. "first create a store"
        - src/ luo tiedosto store.js 
        - imp tab, huom, luo import lauseita 
        
                   import {createStore, applyMiddleware } from 'redux';  
                   import {composeWithDevTools } from 'redux-devtools-extension';
                   import thunk from 'redux-thunk';
                   import rootReducer from './reducers';


                    const initialState = {};

                    const middleware = [thunk];

                    const store = createStore(
                        rootReducer,
                        initialState,
                        composeWithDevTools(applyMiddleware(...middleware))
                    );

                    export default store

    4. Create reducer 
       - Folder src/reducers 
       - file index.js:
                import { combineReducers } from 'redux';
                export default combineReducers({});

    5. App.js, lisää:
        - import {Provider } from 'react-redux'; 
        - import store from '../store';

        wrappaa koko return  <Provider> -tägien sisään: <Provider store={store}> ... </Provider>

        toimii taas, kunhan on tarkkana syntaxin kanssa :DDD 

        chrome extension näyttää nyt sälää btw 
    
    6. Editti reducers-kansion index.js tiedostoon:

            import { combineReducers } from 'redux';
            import leads from './leads'; 

            export default combineReducers({
                leads
            });

    7. Luo src-kansioon kansio actions, jonne tiedosto types.js:
            export const GET_LEADS = "GET_LEADS";

    8. reducers-kansioon tiedosto leads.js:

                    import { GET_LEADS } from '../actions/types.js';

                    const initialState = {
                        leads: []
                    }

                    export default function (state = initialState, action) {
                        switch (action.type) {
                            case GET_LEADS:
                                return {
                                    ...state, 
                                    leads: action.payload
                                }
                            default:
                                return state; 
                        }
                    }

    9. Actions-kansioon (types.js:n seuraksi) tiedosto leads.js: 
        (install axios: npm i axios )

                import axios from 'axios';
                import { GET_LEADS } from './types';

                // GET LEADS: 
                export const getLeads = () => dispatch => {

                    // http://localhost:8000/api/leads/
                    axios.get('/api/leads/')
                        .then(res => {
                            dispatch({
                                type: GET_LEADS,
                                payload: res.data
                            });
                        }).catch(err => console.log(err)); 
                }

    10. Get-kutsu tiedostoon  components/leads/Leads.js: 
          
            import axios from 'axios';
            import { GET_LEADS } from './types';

            // GET LEADS: 
            export const getLeads = () => dispatch => {

                // http://localhost:8000/api/leads/
                axios.get('/api/leads/')
                    .then(res => {
                        dispatch({
                            type: GET_LEADS,
                            payload: res.data
                        });
                    }).catch(err => console.log(err)); 
            }

        HUOM, EI TOIMINUT!! : 
            npm add @babel/plugin-proposal-class-properties --dev
            ja webpack.config.js -tiedosoon plugins lisäys:

                      plugins: [
                            "@babel/plugin-syntax-dynamic-import",
                            "@babel/plugin-proposal-class-properties"
                        ] 

        Noiden jälkeen ei enää erroria cmd:ssä mutta muualla jooo :(( 
            JA ongelmana oli leads.js:n importissa nämä '' eikä nämä "" eli käytä näitä "" !! 


    11. Leads.js (siis components/leads/Leads.js) modaus: 
            import React, { Component } from 'react';
            import { connect } from 'react-redux';
            import PropTypes from 'prop-types';
            import { getLeads } from '../../actions/leads';

            export class Leads extends Component {
                static propTypes = {
                    leads: PropTypes.array.isRequired,
                    getLeads: PropTypes.func.isRequired,
                    deleteLead: PropTypes.func.isRequired
                }
                componentDidMount() {
                    this.props.getLeads(); 
                }
               render() {
                    return (
                        <Fragment>
                            <h2>Leads</h2>
                            <table className="table table-striped">
                                <thead>
                                    <tr>
                                        <th>ID</th><th>Name</th><th>Email</th><th>Message</th><th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {this.props.leads.map(lead => (
                                        <tr key={lead.id}>
                                            <td>{lead.id}</td><td>{lead.name}</td><td>{lead.email}</td><td>{lead.message}</td><td><button className="btn btn-danger btn-sm">Del</button></td>
                                        </tr>
                                    ))}
                                </tbody>

                            </table>
                        </Fragment>
                    )
                }
            }

            const mapStateToProps = state => ({
                leads: state.leads.leads
            });

            export default connect(mapStateToProps, {getLeads})(Leads);


    Voilá - data liikkuu! 

    
    12. DELETE function

        Luodaan actions/leads.js tiedostoon: 

        import { GET_LEADS, DELETE_LEAD } from './types';
         
         . . . 

         export const  deleteLead = (id) => dispatch => {

            axios.delete(`/api/leads/${id}`)
                .then(res => {
                    dispatch({
                        type: DELETE_LEAD,
                        payload: id
                    });
                }).catch(err => console.log(err)); 
        }

    13. ./types editti: export const DELETE_LEAD = "DELETE_LEAD";

    14. Menee reduceriin: tiedosto: leads.js: 

                    case DELETE_LEAD: 
                        return {
                            ...state,
                            leads: state.leads.filter(lead => lead.id!==action.payload)
                        }

        (( palauttaa leads-listan filtteröitynä siten, että poistettu ei ole enää mukana ))

    15. OnClick-action delete-buttoniin ja editti: (siis Leads.js /leads-folderissa):
        import { getLeads, deleteLead } from '../../actions/leads'; MYÖS Exporttiin getLeadin perään 
        onClick={this.props.deleteLead.bind(this, lead.id)}


    erikoista, toimii edelleen :))) ja sitten 35:15 Add form 


    16. Components/leads/Form.js  - luo formi returniin, tee onChange ja onSubmit funktiot: 

            import React, { Component } from 'react';
            import { connect } from "react-redux";
            import PropTypes from 'prop-types'; 
            import  {postLead} from '../../actions/leads';

            export class Form extends Component {
                state = {
                    name: "",
                    email: "",
                    message: ""
                }
                
                static propTypes = {
                    postLead: PropTypes.func.isRequired
                }
                onChange = (ev) =>  {
                    this.setState({...this.state, [ev.target.name]: ev.target.value })  // suluilla ei näköjään merkitystä koska alla submit toimii myös
                }
                onSubmit = ev => {
                    ev.preventDefault();
                    const {name, email, message } = this.state; 
                    const lead = {name, email, message}; 
                    this.props.postLead(lead);
                }

                . . . 

                export default connect(null, {postLead})(Form);

    17. Action, types.js reducer POST metodin toteutus: 

            actions/leads.js: 

                    // POST LEAD 
                    export const postLead = lead => dispatch => {

                        axios.post('/api/leads/', lead)
                            .then(res => {
                                dispatch({
                                    type: POST_LEAD,
                                    payload: res.data
                                });
                            }).catch(err => console.log(err)); 
                    };


            types.js: export const POST_LEAD = "POST_LEAD";

            reducers/leads.js: 

                    case POST_LEAD:
                        return {
                            ...state,
                            leads: [...state.leads, action.payload]
                        }


Toimii toimii, tarkkana syntaxin kanssa :DD 
 --------------------------------------------------------------------------------------
    --------------------------------------------------------------------------------------

PT4: Error handling and Alerts 
https://www.youtube.com/watch?v=Fia-GGgHpK0&list=PLillGF-RfqbbRA-CIUxlxkUpbq0IFkX60&index=4


            TUO TÄMÄ OMIIN .. kivan näköinen tms ja käyttökelpoisen oloinen 
    1. (!!) CMD projektin juuressa, installoi react-alerts: 
            npm i react-alert react-alert-template-basic react-transition-group
            npm run dev 

    2. App.js :
        LISÄÄ: import { Provider as AlertProvider } from 'react-alert'; 
               import AlertTemplate from 'react-alert-template-basic';  // tämä antaa erroria, mutta toimii silti? 
               import Alerts from "./layout/Alerts"; 

               const alertOptions = {
                    timeout: 3000,
                    position: 'top center'
                }

                class App .... 


                        return (
                            <Provider store={store}>
                                <AlertProvider template={AlertTemplate} {...alertOptions}>
                                    <Fragment>
                                        <Header />
                                        <Alerts/>
                                        <div className="container">
                                            <Dashboard />
                                        </div>
                                    </Fragment>
                                </AlertProvider>
                            </Provider>
                        );

    3. Alerts.js components/layout kansioon: 

            import React, { Component, Fragment } from 'react';
            import { withAlert } from "react-alert";
            import { connect } from 'react-redux'; 
            import PropTypes from "prop-types";

            export class Alerts extends Component {
                static propTypes = {
                    error: PropTypes.object.isRequired
                }
                componentDidUpdate(prevProps) {
                    const { error, alert } = this.props;
                    if(error !== prevProps.error) {
                        if(error.msg.name) alert.error(`Name: ${error.msg.name.join()} `)    // .join() muuntaa arrayn stringiksi
                        if(error.msg.email) alert.error(`Email: ${error.msg.email.join()} `)
                        if(error.msg.message) alert.error(`Message: ${error.msg.message.join()} `)
                    }
                }
                render() {
                    return <Fragment />;
                }
            }
            const mapStateToProps = state => ({
                error: state.errors
            });

            export default connect(mapStateToProps)(withAlert()(Alerts));

    Lisätään käsitelemään erroreita: 

    4. redurcersin index.js:ään import, lisää "errors" exporttiin
    5. types.js: export const GET_ERRORS = "GET_ERRORS"; 
    
    5. luo reducers-kansioon tiedosto: errors.js: 

            import {GET_ERRORS } from '../actions/types';

            const initialState = {
                msg: {},
                status: null
            }
            export default function(state = initialState, action) {
                switch(action.type) {
                    case GET_ERRORS:
                        return {
                            msg: action.payload.msg,
                            status: action.payload.status
                        }
                    default:
                        return state; 
                }
            }

    6. edit action/leads.js

            axiosin catch err:
            ... 
            }).catch(err => {
            const errors = {
                msg: err.response.data,
                status: err.response.status
            }
            dispatch({
                type: GET_ERRORS,
                payload: errors
            })

    VIESTIT VIESTIEN YM TALLENNUSTA VARTEN 

    7. reduceriin tiedosto messages.js: 

            import {CREATE_MESSAGE } from '../actions/types';

            const initialState = {}

            export default function(state = initialState, action) {
                switch(action.type) {
                    case CREATE_MESSAGE:
                        return (state = action.payload)
                    default:
                        return state; 
                }
            }
    8. types.js: 
                export const CREATE_MESSAGE = "CREATE_MESSAGE"; 

    9. reducerin index.js lisää import ja export 

    10. Actions kansioon messages.js:

            import { CREATE_MESSAGE } from './types';

            // CREATE MESSAGE
            export const createMessage = msg => {
                return {
                    type: CREATE_MESSAGE,
                    payload: msg
                }
            }
    11. Actions leads.js: 

            LISÄÄ: 
            import { createMessage} from './messages';
            . . .
            deleteLead & Axios .then: 

                      .then(res => {
                        dispatch(createMessage({ deleteLead: "Lead Deleted"}));
                        dispatch({
                            type: DELETE_LEAD,
                            payload: id
                        });

            addLead & --" -- : 

                        dispatch(createMessage({ addLead: "Lead Added"}));
                        . . . 

    12. layout/Alerts.js, muokkaus: 

            static propTypes = {
                error: PropTypes.object.isRequired,
                message: PropTypes.object.isRequired
            };

            const { error, alert, message } = this.props;
            . . .
            // aikaisempien iffien jälkeen: 

            if(message !== prevProps.message) {
                if(message.deleteLead) alert.success(message.deleteLead); 
                if(message.addLead) alert.success(message.addLead); 
                
            }

            const mapStateToProps = state => ({
                error: state.errors,
                message: state.messages
            });

MUISTA: cache pois, tallenna, REFRESH sivu, niin muutos näkyy 

    13. leads/Form.js editti: 

                onSubmit = ev => {
                    ev.preventDefault();
                    const {name, email, message } = this.state; 
                    const lead = {name, email, message}; 
                    this.props.postLead(lead);
                    this.setState({name: "", email:"", message:""})     // tämä lisätty 
                }

TOIMII Woopdiduu :))) 
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
PT5: Django Token Authentication 
https://www.youtube.com/watch?v=0d7cIfiydAc&list=PLillGF-RfqbbRA-CIUxlxkUpbq0IFkX60&index=5

Backendia .... 

    1. leadmanager/leads/models.py: 

            edit: 
                from django.contrib.auth.models import User
            . . .
                message = .... 
                owner = models.ForeignKey(User, related_name="leads", on_delete=models.CASCADE, null = True)
                created_at = . . .
            
    2. Migrate! 
            -- Stoppaa serveri 
            -- cd leadmanager 
            -- python manage.py makemigrations 
            -- python manage.py migrate 


    3. api.py:
            edit permissions: 

                class LeadViewSet(viewsets.ModelViewSet):
                    permission_classes = [
                        permissions.IsAuthenticated         
                    ]

                    serializer_class = LeadSerializer

                    def get_queryset(self):
                        return self.request.user.leads.all()
                    
                    def perform_create(self, serializer):
                        serializer.save(owner=self.request.user)

fronttia .... 

    4. /actions/messages.js:

        lisäys: 

            // RETURN ERRORS: 
            export const returnErrors = (msg, status) =>  {
                return {
                    type: GET_ERRORS,
                    payload: {msg, status}
                }
            } 

    5. Yllä oleva kutsutaan actions/leads.js -tiedostossa: 

        muokkaus:

            import { createMessage, returnErrors} from './messages';
            . . .
            getLeads ja postLead & axios .catch vaihdettu tähän: 

                 }).catch(err => dispatch(returnErrors(err.response.data, err.response.status))); 

Aaarggh: protip: npm run dev KÄYNNISSÄ? Savettu? browser Refressattu? 

    6. User REGISTRATION 

        6.1. leadmanager/settings.py - lisää django-rest-knox
                
                        INSTALLED_APPS = [
                            . . .
                            'knox'
                        ]
                        REST_FRAMEWORK = {
                            'DEFAULT_AUTHENTICATION_CLASSES': ('knox.auth.TokenAuthentication')
                        }

            HUOM: ei toimi ennen kuin starttaat pipenv:n --> komento: pipenv shell 


        6.2. Migrate!! 
            -- Stoppaa serveri 
            -- cd leadmanager 
            -- python manage.py makemigrations (no changes ??)
            -- python manage.py migrate (ok!! )
            -- python manage.py runserver

        6.3. luo appi tilejä varten 
            -- python manage.py startapp accounts 
            -- leadmanager/settings.py .. lisää INSTALLED_APPS -kohtaan 'accounts'
            
        6.4 luo accounts/serializer.py: 

                    from rest_framework import serializers 
                    from django.contrib.auth.models import User
                    from django.contrib.auth import authenticate 

                    # USER SERIALIZER 
                    class UserSerializer(serializers.ModelSerializer):
                        class Meta: 
                            model = User
                            fields = ('id', 'username', 'email')


                    # REGISTER SERIALIZER 
                    class RegisterSerializer(serializers.ModelSerializer):
                        class Meta:
                            model = User
                            fields = ('id', 'username', 'email', 'password')
                            extra_kwargs = {'password': {'write_only':True}}

                        def create(self, validated_data):
                            user = User.objects.create_user(validated_data['username'], validated_data['email'], validated_data['password'])
                            
                            return user

        6.5. luo accounts/api.py:

                from rest_framework import generics, permissions
                from rest_framework.response import Response 
                from knox.models import AuthToken 
                from .serializers import UserSerializer, RegisterSerializer 

                # REG API
                class RegisterAPI(generics.GenericAPIView):
                    serializer_class = RegisterSerializer

                    def post(self, request, *args, **kwargs):
                        serializer = self.get_serializer(data=request.data)
                        serializer.is_valid(raise_exception=True)
                        user = serializer.save() 
                        _,token = AuthToken.objects.create(user) 
                        return Response({
                            "user": UserSerializer(user, context=self.get_serializer_context()).data,
                            "token": token
                        }) 

        6.6. luo accounts/urls.py: 

                from django.urls import path, include 
                from .api import RegisterAPI 
                from knox import views as knox_views 

                urlpatterns = [
                    path('api/auth', include('knox.urls')),
                    path('api/auth/register', RegisterAPI.as_view())
                ]

            -- leadmanager/urls.py, lisäys: 
            . . . 
                path('', include('accounts.urls'))

30:15 saakka toimii --- siitä eteenpäin on login osio 
(ihme numeroitia lol :DD)

    7. accounts/serializers.py --- loginSerializer: 

            class LoginSerializer(serializers.Serializer):
            username = serializers.CharField()
            password = serializers.CharField()

            def validate(self, data):
                user = authenticate(**data)
                if user and user.is_active:
                    return user
                raise serializers.ValidationError("Incorrect Credentials")

    8. accounts/api.py: 

            from .serializers import UserSerializer, RegisterSerializer, LoginSerializer 
            . . . 
            class LoginAPI(generics.GenericAPIView):
                serializer_class = LoginrSerializer

                def post(self, request, *args, **kwargs):
                    serializer = self.get_serializer(data=request.data)
                    serializer.is_valid(raise_exception=True)
                    user = serializer.validated_data
                    _,token = AuthToken.objects.create(user) 
                    return Response({
                        "user": UserSerializer(user, context=self.get_serializer_context()).data,
                        "token": token
                    }) 

    9. accounts/urls.py:

            from django.urls import path, include 
            from .api import RegisterAPI, LoginAPI 
            from knox import views as knox_views 

            urlpatterns = [
                path('api/auth/register', RegisterAPI.as_view()),
                path('api/auth/login', LoginAPI.as_view()),
                path('api/auth', include('knox.urls')),

            ]

    10 UserAPI ... accounts/api.py

            class UserAPI(generics.RetrieveAPIView):
            permission_classes = [ 
                permissions.IsAuthenticated,
            ]
            serializer_class = UserSerializer

            def get_object(self):
                return self.request.user

    11. lisäys urls.py:hyn: import .... LoginAPI, UserAPI
                            path('api/auth/user', UserAPI.as_view()),

       

    Testaus Postmanilla (toimi woohoo!):
    POST käyttiksen luominen: http://localhost:8000/api/auth/register (content type, application JSON headerissä ja JSON bodyssa)
    POST login: http://localhost:8000/api/auth/login (--"--)
    GET käyttäjätiedot http://localhost:8000/api/auth/user (headerissä Authorization ja Token "väilyönti" ja kirjautumisessa saatu token)


    12. LOGOUT: 
        - urls.py: 
                     kokopläjäys nyt:

                            from django.urls import path, include 
                            from .api import RegisterAPI, LoginAPI, UserAPI
                            from knox import views as knox_views 

                            urlpatterns = [
                                path('api/auth', include('knox.urls')),
                                path('api/auth/register', RegisterAPI.as_view()),
                                path('api/auth/login', LoginAPI.as_view()),
                                path('api/auth/user', UserAPI.as_view()),
                                path('api/auth/logout', knox_views.LogoutView.as_view(), name='knox_logout)
                            ]

    Testaus:
    POST http://localhost:8000/api/auth/logout Authorization kuten GET käyttäjätiedot (Sen jälkeen käyttäjätietojen haku ei enää onnistu koska token on poistettu eli logout toimi)


-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
PT 6: https://www.youtube.com/watch?v=EmAc4wQikwY&list=PLillGF-RfqbbRA-CIUxlxkUpbq0IFkX60&index=6
Auth State & Private Routes (login näkymät ja omat sivut sisältöineen)

    1. Install react-router: npm i react-router-dom 
                             npm run dev

    2. src/components/App.js: 
               import { HashRouter as Router, Route, Switch, Redirect } from "react-router-dom";
               . . . 

                return (
                    <Provider store={store}>
                        <AlertProvider template={AlertTemplate} {...alertOptions}>
                            <Router>
                                <Fragment>
                                    <Header />
                                    <Alerts />
                                    <div className="container">
                                        <Switch>
                                            <Route exact path="/" component={Dashboard} />
                                        </Switch>
                                    </div>
                                </Fragment>
                            </Router>
                        </AlertProvider>
                    </Provider>
                );

    3. luo components/accounts/Login.js ja Register.js

        REG: 
                import React, { Component } from 'react'
                import { Link } from 'react-router-dom';
                export class Register extends Component {
                    state = {
                        username: '',
                        email: '',
                        password: '',
                        password2: ''
                    }
                    onSubmit = ev => {
                        ev.preventDefault();
                        console.log('submit');
                    }
                    onChange = ev => this.setState({ [ev.target.name]: ev.target.value })
                    render() {
                        const { username, email, password, password2 } = this.state;
                        return (
                            <div className="col-md-6 m-auto">
                                <div className="card card-body mt-5">
                                    <h2 className="text-center">Register</h2>
                                    <form onSubmit={this.onSubmit}>
                                        <div className="form-group">
                                            <label>Username</label>
                                            <input type="text" className="form-control" name="username" onChange={this.onChange} value={username} />
                                        </div>
                                        // email, password ja password2 samaan tyyliin paitsi type="email"/"password" 
                                        <div className="form-group">
                                            <button type="submit" className="btn btn-primary">Register</button>
                                        </div>
                                        <p>
                                            Already have an account? <Link to="/login">Login</Link>
                                        </p>
                                    </form>
                                </div>
                            </div>
                        );
                    }
                }
                export default Register

        LOGIN: 

                import React, { Component } from 'react';
                import { Link } from 'react-router-dom';

                export class Login extends Component {
                    state = {
                        username: '',
                        password: ''
                    }
                    onSubmit = ev => {
                        ev.preventDefault();
                        console.log('submit');
                    }
                    onChange = ev => this.setState({ [ev.target.name]: ev.target.value })

                    render() {
                        const { username, password } = this.state;
                        return (
                            <div className="col-md-6 m-auto">
                                <div className="card card-body mt-5">
                                    <h2 className="text-center">Login</h2>
                                    <form onSubmit={this.onSubmit}>
                                        <div className="form-group">
                                            <label>Username</label>
                                            <input type="text" className="form-control" name="username" onChange={this.onChange} value={username} />
                                        </div>
                                        <div className="form-group">
                                            <label>Password</label>
                                            <input type="password" className="form-control" name="password" onChange={this.onChange} value={password} />
                                        </div>
                                        <div className="form-group">
                                            <button type="submit" className="btn btn-primary">Login</button>
                                        </div>
                                        <p>
                                            Don't have an account? <Link to="/register">Login</Link>
                                        </p>
                                    </form>
                                </div>
                            </div>
                        );
                    }
                }
                export default Login



    4. App.js 

            <Switch>
                <Route exact path="/" component={Dashboard} />
                <Route exact path="/register" component={Register} />
                <Route exact path="/login" component={Login} />
            </Switch>

    5. layout/Header.js: 
            import { Link } from 'react-router-dom'; 
            . . . 
              <ul className="navbar-nav mr-auto mt-2 mt-lg-0">
                        <li className="nav-item"><Link to="/register" className="nav-lin">Register</Link></li>
                        <li className="nav-item"><Link to="/login" className="nav-lin">Login</Link></li>
                </ul>

    HOI: navin sisään voi laittaa myös containerin jolloin otsikot/linkit tulee enemmän sisäkkäin
        
    6. reducers/index.js: import auth from "./auth" ja auth combineReducers({ }) -kohtaan 

    7. Luo reducers/auth.js:

                const initialState = {
                    token: localStorage.getItem('token'),
                    isAuthenticated: null,
                    isLoading: false,
                    user: null
                }

                export default function(state = initialState, action) {
                    switch(action.type) {
                        default:
                            return state;
                    }
                }
    8. Luo components/common/PrivateRoute.js:

                import React from 'react'
                import { Route, Redirect } from "react-router-dom";
                import { connect } from "react-redux";

                const PrivateRoute = ({ component: Component, auth, ...rest }) => (
                    <Route {...rest} render ={props => {
                        if(auth.isLoading) {
                            return <h2>Loading......</h2>
                        } else if (!auth.isAuthenticated) {
                            return <Redirect to="/login" />;
                        } else {
                            return <Component {...props}/>;
                        }
                    }}
                    />
                );
                const mapStateToProps = state => ({
                    auth: state.auth
                })
                export default connect()(PrivateRoute); 


    9. App.js: 
            import PrivateRoute from "./common/PrivateRoute"; 
            . . . 
            // vaihto PrivateRouteen (kaikki mitä haluat siis suojella):

             <PrivateRoute exact path="/" component={Dashboard} />

KIRJOITUSVIRHEITÄ PERKELE :X :X 
20:10 --- ACTIONS 

    10. actions/types.js: 

                export const USER_LOADING = "USER_LOADING";
                export const USER_LOADED = "USER_LOADED";
                export const AUTH_ERROR = "AUTH_ERROR";
    
    11. reducers/auth.js: 

                import { USER_LOADED, USER_LOADING, AUTH_ERROR } from '../actions/types'

                const initialState = {
                    token: localStorage.getItem('token'),
                    isAuthenticated: null,
                    isLoading: false,
                    user: null
                }
                export default function (state = initialState, action) {
                    switch (action.type) {
                        case USER_LOADING:
                            return {
                                ...state,
                                isLoading: true
                            };
                        case USER_LOADED:
                            return {
                                ...state,
                                isAuthenticated: true,
                                isLoading: false,
                                user: action.payload
                            };
                        case AUTH_ERROR:
                            localStorage.removeItem('token')
                            return {
                                ...state,
                                token: null,
                                user: null,
                                isAuthenticated: false,
                                isLoading: false
                            };
                        default:
                            return state;
                    }
                }

    12. luo actions/auth.js : 

            import axios from "axios";
            import { returnErrors } from './messages';
            import { USER_LOADED, USER_LOADING, AUTH_ERROR } from './types';

            // CHECK TOKEN & LOAD USER
            export const loadUser = () => (dispatch, getState) => {
                // user loading: 
                dispatch({ type: USER_LOADING });
                // get token from state
                const token = getState().auth.token;
                //headers:
                const config = {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
                // jos token on, niin mukaan headeriin kuten postmanissa 
                if (token) {
                    config.headers['Authorization'] = `Token ${token}`
                }

                axios.get('/api/auth/user', config)
                    .then(res => {
                        dispatch({
                            type: USER_LOADED,
                            payload: res.data
                        });
                    }).catch(err => {
                        dispatch(returnErrors(error.resposen.data, error.response.status));
                        dispatch({
                            type: AUTH_ERROR
                        });
                    })
            }

    13. App.js: lisäys:

            import { loadUser } from '../actions/auth';

            class App extends Component {
                componentDidMount() {
                    store.dispatch(loadUser()); 
                }
                ...

mitä hittoa? Edelleen toimii kuten videolla :DDD 
----------------------------------------------------------------------------
----------------------------------------------------------------------------
PT7/7 frontend Authentication -- eli login toiminnot yms 
https://www.youtube.com/watch?v=kfpY5BsIoFg&list=PLillGF-RfqbbRA-CIUxlxkUpbq0IFkX60&index=7

    1. actions/types.js: 
            export const LOGIN_SUCCESS = "LOGIN_SUCCESS";
            export const LOGIN_FAIL = "LOGIN_FAIL";

    2. actions/auth.js (toiminto sisäänkirjautumiselle): 

        // lisäys: 

                // LOGIN USER: 
                export const login = (username, password) => dispatch => {
                    //headers:
                    const config = {
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    }
                    // request body:
                    const body = JSON.stringify({username, password});

                    axios.post('/api/auth/login', body, config)
                        .then(res => {
                            dispatch({
                                type: LOGIN_SUCCESS,
                                payload: res.data
                            });
                        }).catch(err => {
                            dispatch(returnErrors(err.response.data, err.response.status));
                            dispatch({
                                type: LOGIN_FAIL
                            });
                        })
                }

    3. reducers/auth.js: 

                    import { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS } from '../actions/types'


                    case LOGIN_SUCCESS:
                        localStorage.setItem('token', action.payload.token)
                        return {
                            ...state,
                            ...action.payload,
                            isAuthenticated: true,
                            isLoading: false
                        }
                    case AUTH_ERROR:
                    case LOGIN_FAIL:
                        localStorage.removeItem('token')
                        return {
                            ...state,
                            token: null,
                            user: null,
                            isAuthenticated: false,
                            isLoading: false
                        };


    4. accounts/Login.js 

                . . . 
                import {connect } from 'react-redux';
                import PropTypes from "prop-types";
                import {login } from '../actions/auth';
                . . .
                // classissa heti staten jälkeen: 
                    static propTypes = {
                        login: PropTypes.func.isRequired,
                        isAuthenticated: PropTypes.bool
                    }
                    onSubmit = ev => {
                        ev.preventDefault();
                        this.props.login(this.state.username, this.state.password)
                }
                ... 
                    render() {
                        if(this.props.isAuthenticated) {
                            return <Redirect to = "/"/>; 
                        }
                // pohjalle: 
                const mapStateToProps = state => ({
                    isAuthenticated: state.auth.isAuthenticated
                }) 

                export default connect(mapStateToProps, {login })(Login); 



    5. Logout -nappi headeriin, ehdollisen renderöinnin kanssa: 

        import React, { Component } from 'react'
        import { Link } from 'react-router-dom';
        import { connect } from 'react-redux';
        import PropTypes from 'prop-types';


        export class Header extends Component {
            static propTypes = {
                auth: PropTypes.object.isRequired
            }

            render() {
                const { isAuthenticated, user } = this.props.auth;

                const authLinks = (
                    <ul className="navbar-nav">
                        <button className="nav-link btn btn-info btn-sm text-light">
                            Logout
                        </button>
                    </ul>

                );
                const guestLinks = (
                    <ul className="navbar-nav">
                        <li className="nav-item"><Link to="/register" className="nav-link">Register</Link></li>
                        <li className="nav-item"><Link to="/login" className="nav-link">Login</Link></li>
                    </ul>
                )

                return (
                    <nav className="navbar navbar-expand-sm navbar-light bg-light">
                        <div className="container">
                            <button className="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo01" aria-controls="navbarTogglerDemo01" aria-expanded="false" aria-label="Toggle navigation">
                                <span className="navbar-toggler-icon"></span>
                            </button>
                            <div className="collapse navbar-collapse" id="navbarTogglerDemo01">
                                <a className="navbar-brand" href="#">Lead Manager</a>
                            </div>
                            {isAuthenticated ? authLinks : guestLinks}
                        </div>
                    </nav>
                )
            }
        }
        const mapStateToProps = state => ({
            auth: state.auth
        });

        export default connect(mapStateToProps)(Header);

    6. types.js: export const LOGOUT_SUCCESS = "LOGOUT_SUCCESS";
    
    7. actions/auth.js: 

            export const logout = () => (dispatch, getState) => {
                // get token from state
                const token = getState().auth.token;
                //headers:
                const config = {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
                // jos token on, niin mukaan headeriin kuten postmanissa 
                if (token) {
                    config.headers['Authorization'] = `Token ${token}`
                }

                axios.get('/api/auth/logout', null, config)
                    .then(res => {
                        dispatch({
                            type: LOGOUT_SUCCESS,
                        });
                    }).catch(err => {
                        dispatch(returnErrors(err.response.data, err.response.status));
                    })
            }

    8. reducers/auth.js: 
        //  lisää samaan nippuun kuin LOGIN_FAIL 
               case LOGOUT_SUCCESS: 

    9. Header.js: 
            import { logout } from '../../actions/auth'
            . . . 
                static propTypes = {
                    auth: PropTypes.object.isRequired,
                    logout: PropTypes.func.isRequired
                }


             <button onClick={this.props.logout} .... 
            . .. 

            export default connect(mapStateToProps, { logout })(Header);



20:29 -- login & logout toteutettu, seur bad login 

    10. layout/alerts.js: 
        // ekaan ifiin vikaks messiin: 
             if (error.msg.non_field_errors) alert.error(error.msg.non_field_errors.join())


    11. Header.js (näyttämään käyttäjän nimen):

                    const authLinks = (
                        <ul className="navbar-nav">
                            <span className="navbar-text mr-3"><strong>{user ? `Welcome ${user.username}` : ""}</strong></span>
                        . . . 

    12. actions/auth.js: (pätkä loadUserista siirretty omaan funktioon):




            // functio headerin configin asettamiseen, jossa auth/token: 
            export const tokenConfig = getState => {
                // get token from state
                const token = getState().auth.token;
                //headers:
                const config = {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
                // jos token on, niin mukaan headeriin kuten postmanissa 
                if (token) {
                    config.headers['Authorization'] = `Token ${token}`
                }
                return config
            }


    // logoutista poistettu sama toiminto kuin yllä ja muuten muutettu tähän:
    
                axios.post('/api/auth/logout/', null, tokenConfig(getState))
                    .then(res => {
                        dispatch({
                            type: LOGOUT_SUCCESS,
                        });
                    }).catch(err => {
                        dispatch(returnErrors(err.response.data, err.response.status));
                    })

    // loadUserista poistettu ks pätkä ja axiosin alku vaihettu tähän: 

                   axios.get('/api/auth/user', tokenConfig(getState))
                    .then(res => {
                        dispatch({ . . . 



    13. Register toiminnot, 26:56 --- 

            -- actions/types.js: 
                        export const REGISTER_SUCCESS = "REGISTER_SUCCESS"; 
                        export const REGISTER_FAIL = "REGISTER_FAIL"; 
                        

            -- actions/auth.js:

                    import { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_FAIL, REGISTER_SUCCESS } from './types';

                    // REG USER: 
                    export const register = ({ username, email, password }) => dispatch => {
                        //headers:
                        const config = {
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        }
                        // request body:
                        const body = JSON.stringify({ username, email, password });

                        axios.post('/api/auth/register', body, config)
                            .then(res => {
                                dispatch({
                                    type: REGISTER_SUCCESS,
                                    payload: res.data
                                });
                            }).catch(err => {
                                dispatch(returnErrors(err.response.data, err.response.status));
                                dispatch({
                                    type: REGISTER_FAIL
                                });
                            })
                    }

            -- reducers/auth.js: 

                    // samaan nippuun register kuin loginit (huom tsekkaa importit tuliko automaattisesti) .. 

                                    case LOGIN_SUCCESS:
                                    case REGISTER_SUCCESS:

                                    . . . 

                                    case AUTH_ERROR:
                                    case LOGIN_FAIL:
                                    case LOGOUT_SUCCESS: 
                                    case REGISTER_FAIL:

            -- components/accounts/Register.js:

                        import { connect } from 'react-redux';
                        import PropTypes from "prop-types";
                        import { register } from '../../actions/auth';
                        import { createMessage } from '../../actions/messages';  // .. = yksi kansio alas
                        . . . // + Redirect react-router-domiin 

                            static propTypes = {
                                register: PropTypes.func.isRequired,
                                isAuthenticated: PropTypes.bool
                            }

                        onSubmit = ev => {
                            ev.preventDefault();
                            if(this.state.password !== this.state.password2) {              // saman voi tehdä const {password, password2} = this.state --> nyt passwordissa/2:ssa on staten passwordien tiedot ja ne voisi verrata 
                                this.props.createMessage({passwordsNotMatch: 'Passwords do not match'})
                            } else {
                                const newUser = {
                                    username: this.state.username,
                                    password: this.state.password,
                                    email: this.state.email
                                }
                                this.props.register(newUser); 
                            }
                        }

                        . . . 

                            render() {
                                if(this.props.isAuthenticated) {
                                    return <Redirect to="/"/>;
                                }
                        . . .

                        const mapStateToProps = state => ({
                            isAuthenticated: state.auth.isAuthenticated
                        })

                        export default connect(mapStateToProps, { register, createMessage })(Register); 

            -- alerts.js (yhet ifit loppuihin lisää):

                                if (error !== prevProps.error) {
                                . . . 
                                    if(error.msg.username) alert.error(error.msg.username.join());
                                . . . 
                               if (message !== prevProps.message) {
                                . . . 
                                    if(message.passwordsNotMatch) alert.error(message.passwordsNotMatch); 
                                } 


41:55 ... LEEADS: 

    14. actions/leads.js 

                    import { tokenConfig } from './auth';
                     . . . 
                    
                    // GET LEADS: 
                    export const getLeads = () => (dispatch, getState) => {

                        axios.get('/api/leads/', tokenConfig(getState))
                            .then(res => {
                                dispatch({
                    . . . 

                    // DELETE LEAD: 
                    export const deleteLead = (id) => (dispatch, getState) => {

                        axios.delete(`/api/leads/${id}`, tokenConfig(getState))
                            .then(res => {
                    . . . 

                    // POST LEAD 
                    export const postLead = lead => (dispatch, getState) => {

                        axios.post('/api/leads/', lead, tokenConfig(getState))
                            .then(res => {
                    . . . 

PROBLEEMI, REFRESH PUDOTTAA PIHALLE :((( 